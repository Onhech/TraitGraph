TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 1",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 1234",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 123",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 678",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789  12345 6789",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
devtools::load_all()
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789  12345 6789",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
devtools::load_all()
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789  12345 6789",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
devtools::load_all()
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789  12345 6789",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 6789 12345 678",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
# --- Voting Question Example ---
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "Who would you choose as a partner for the upcoming zombie appocolypse?",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
devtools::load_all()
# --- Workflow C: Test GitHub Installation ---
# Use this to simulate a new user installing from your public repository.
# It's best to run this in a completely fresh R session.
# remove.packages("TraitGraph") # Ensure no local version is present
# remotes::install_github("Onhech/TraitGraph")
library(TraitGraph)
# --- 3. CREATE SAMPLE DATA ---
# Create one master sample data frame for testing.
set.seed(42) # for reproducibility
sample_data <- tibble::tribble(
~name,    ~favourite_color, ~HonestyHumility, ~Emotionality, ~Extroversion, ~Agreeableness, ~Conscientiousness, ~Openness,
"Alice Frank",   "#FF6B6B",         75,               40,            80,            85,             90,                 70,
"Bob Steward",     "#4ECDC4",         80,               45,            75,            90,             85,                 65,
"Frank Bobby",   "#45B7D1",         70,               50,            85,            80,             95,                 75,
"Eve Twingle",     "#F7B801",         85,               70,            75,            80,             40,                 95,
"Grace Hunter",   "#FAD390",         90,               65,            80,            75,             35,                 90,
"Heidi Probosky",   "#FF8C61",         80,               75,            70,            85,             45,                 85,
"Charlie Kane", "#3D5A80",         40,               80,            30,            50,             60,                 45,
"David Turner Salvadora III",   "#98C1D9",         45,               75,            35,            55,             65,                 50,
"Ivan Evans",    "#E0FBFC",         35,               85,            25,            45,             55,                 40,
"Judy Perch",    "#293241",         50,               70,            40,            60,             70,                 55
) %>%
dplyr::mutate(rankedQ_1 = sample(0:10, 10, replace = TRUE))
# --- 4. FUNCTION TESTING ---
# After running `devtools::load_all()`, you can run these calls to test.
# --- Trait Example ---
TG_trait(
dataset = sample_data,
column_name = "Extroversion",
save_plot = T,
output_path = 'ExamplePlots/trait_graph_example.jpg'
)
# --- Voting Question Example ---
TG_votes(
dataset = sample_data,
column_name = "rankedQ_1",
title = "Who apologizes even when someone else bumps into them?",
save_plot = T,
output_path = 'ExamplePlots/voting_graph_example.jpg',
)
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_5",
title = "Who apologizes even when someone else bumps into them?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_A_plot.jpg")
setwd('/Users/lyndenjensen/Library/CloudStorage/GoogleDrive-lynden.jensen@gmail.com/My Drive/Work/PsychologyReports/Product/Reports/RMarkdown/')
# This code should be a standalone code that creates the data structure and 
# for a graphs of personality measures.
# Packages
# Ensure you have the 'remotes' package installed to install from GitHub
# install.packages("remotes")
# library(remotes)
setwd('/Users/lyndenjensen/Library/CloudStorage/GoogleDrive-lynden.jensen@gmail.com/My Drive/Work/PsychologyReports/Product/Reports/RMarkdown/')
# Install the TraitGraph package from GitHub
remotes::install_github("Onhech/TraitGraph", upgrade = "always")
library(dplyr)
library(TraitGraph)
library(webshot2)
library(htmltools)
library(ggplot2)
# Start the timer to measure processing time
start_time <- proc.time()
# Data
# This assumes you have a "sample_data.csv" file in your working directory
# with columns corresponding to the codes used below (e.g., HEX_H, HEX_H_F, etc.).
data <- read.csv("Rfiles/group_dataset.csv")
# Trait Graphs ####
TraitMap <- read.csv("Rfiles/TraitMap.csv")
#data$name[7]<-"09876543210987654321"
# This code should be a standalone code that creates the data structure and 
# for a graphs of personality measures.
# Packages
# Ensure you have the 'remotes' package installed to install from GitHub
# install.packages("remotes")
# library(remotes)
setwd('/Users/lyndenjensen/Library/CloudStorage/GoogleDrive-lynden.jensen@gmail.com/My Drive/Work/PsychologyReports/Product/Reports/RMarkdown/')
# Install the TraitGraph package from GitHub
remotes::install_github("Onhech/TraitGraph", upgrade = "always")
library(dplyr)
library(TraitGraph)
library(webshot2)
library(htmltools)
library(ggplot2)
# Start the timer to measure processing time
start_time <- proc.time()
# Data
# This assumes you have a "sample_data.csv" file in your working directory
# with columns corresponding to the codes used below (e.g., HEX_H, HEX_H_F, etc.).
data <- read.csv("Rfiles/group_dataset.csv")
# Trait Graphs ####
TraitMap <- read.csv("Rfiles/TraitMap.csv")
#data$name[7]<-"09876543210987654321"
# Standard Settings
title_vjust_mod <- 2.75
save_plot <- TRUE
show_plot <- FALSE
name_size_mod <- 2
name_position_mod <- 1.04
group_average_position_mod <- 1.06
margin_y_mod <- 0.4
callout_size_mod <- 1.25
TraitMap$Face<-ifelse(TraitMap$Type=="trait", 'bold', ifelse(TraitMap$Type=="subtrait", "bold.italic","plain"))
TraitMap$callout_size_mod<-ifelse(TraitMap$Type=="trait", 1.25, ifelse(TraitMap$Type=="subtrait", 1.5,1))
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_5",
title = "Who apologizes even when someone else bumps into them?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_A_plot.jpg")
# This code should be a standalone code that creates the data structure and 
# for a graphs of personality measures.
# Packages
# Ensure you have the 'remotes' package installed to install from GitHub
# install.packages("remotes")
# library(remotes)
setwd('/Users/lyndenjensen/Library/CloudStorage/GoogleDrive-lynden.jensen@gmail.com/My Drive/Work/PsychologyReports/Product/Reports/RMarkdown/')
# Install the TraitGraph package from GitHub
remotes::install_github("Onhech/TraitGraph", upgrade = "always")
library(dplyr)
library(TraitGraph)
library(webshot2)
library(htmltools)
library(ggplot2)
# Start the timer to measure processing time
start_time <- proc.time()
# Data
# This assumes you have a "sample_data.csv" file in your working directory
# with columns corresponding to the codes used below (e.g., HEX_H, HEX_H_F, etc.).
data <- read.csv("Rfiles/group_dataset.csv")
# Trait Graphs ####
TraitMap <- read.csv("Rfiles/TraitMap.csv")
#data$name[7]<-"09876543210987654321"
# Standard Settings
title_vjust_mod <- 2.75
save_plot <- TRUE
show_plot <- FALSE
name_size_mod <- 2
name_position_mod <- 1.04
group_average_position_mod <- 1.06
margin_y_mod <- 0.4
callout_size_mod <- 1.25
TraitMap$Face<-ifelse(TraitMap$Type=="trait", 'bold', ifelse(TraitMap$Type=="subtrait", "bold.italic","plain"))
TraitMap$callout_size_mod<-ifelse(TraitMap$Type=="trait", 1.25, ifelse(TraitMap$Type=="subtrait", 1.5,1))
# Loop through each row of the plot_params data frame
for (i in 1:nrow(TraitMap)) {
row <- TraitMap[i, ]
output_path <- paste0("Data/trait_", row$Column, "_plot.jpg")  # Construct the output path
TraitGraph::TG_trait(
dataset = data,
column_name = row$Column,
title = row$Name,
output_path = output_path,
title_face = row$Face,
title_vjust_mod = title_vjust_mod,
save_plot = save_plot,
show_plot = show_plot,
name_size_mod = name_size_mod,
callout_size_mod = row$callout_size_mod,
name_position_mod = name_position_mod,
margin_y_mod = margin_y_mod,
group_average_position_mod = group_average_position_mod
)
}
# Jungian Graphs ####
TraitGraph::TG_jung(dataset = data,
column_name = "JPP_IE",
color = "favourite_color",
title = "Introversion vs. Extroversion",
label_top = "Extraversion",
label_bottom = "Introversion",
save_plot = TRUE, show_plot = FALSE,
output_path = "Data/trait_JPP_EI_plot.jpg")
TraitGraph::TG_jung(dataset = data,
column_name = "JPP_SN",
color = "favourite_color",
title = "Senseing vs. Intuition",
label_top = "Sensing",
label_bottom = "Intuition",
save_plot = TRUE, show_plot = FALSE,
output_path = "Data/trait_JPP_SN_plot.jpg")
TraitGraph::TG_jung(dataset = data,
column_name = "JPP_FT",
color = "favourite_color",
title = "Thinking vs. Feeling",
label_top = "Thinking",
label_bottom = "Feeling",
save_plot = TRUE, show_plot = FALSE,
output_path = "Data/trait_JPP_TF_plot.jpg")
TraitGraph::TG_jung(dataset = data,
column_name = "JPP_JP",
color = "favourite_color",
title = "Judging vs. Perceiving",
label_top = "Judging",
label_bottom = "Perceiving",
save_plot = TRUE, show_plot = FALSE,
output_path = "Data/trait_JPP_JP_plot.jpg")
# Voting / Comparative Questions ####
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_1",
title = "If your haircut looked genuinely awful, who would tell you the truth?",
color = "favourite_color",
save_plot = TRUE, show_plot = T,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_Hon_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_2",
title = "Who would win a Nobel Prize and then apologize for taking up everyone's time?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_Hum_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_3",
title = "Who would you choose to be the voice of reason during a high-pressure escape room?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_E_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_4",
title = "If the plan changes to a massive rave, who suddenly develops a mysterious cough?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_X_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_5",
title = "Who apologizes even when someone else bumps into them?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_A_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_6",
title = "Who would you trust to design a clever, multi-room escape room from scratch?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_C_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_7",
title = "In a game, who would choose to be the cackling villain over the noble hero?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_HEX_O_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_8",
title = "Who is best at planting an idea in someone's head and making them think it was theirs?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_DT_M_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_9",
title = "Who would press a big red button labelled 'DO NOT PRESS' just to see what happens?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_DT_P_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_10",
title = "In a simulation game, who is most likely to trap their character in a pool by deleting the ladder?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_DT_S_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_11",
title = "Who would veto a perfect group photo simply because they don't look amazing in it?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_DT_N_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_12",
title = "Who would have an existential crisis about whether it's okay to lie to a telemarketer?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_FM_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_13",
title = "Who would rather assemble IKEA furniture without instructions than follow them?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_CM_A_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_14",
title = "Who would become the most obsessed with beating a notoriously difficult video game level?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_CM_C_plot.jpg")
TraitGraph::TG_votes(dataset = data,
column_name = "Q_CQ_15",
title = "Who suffers from the most intense, comical level of FOMO (Fear Of Missing Out)?",
color = "favourite_color",
save_plot = TRUE, show_plot = FALSE,
minor_ticks = 3,
output_path = "Data/vote_CQ_CM_R_plot.jpg")
# --- Similarity ####
similarity_columns <- c("BAS","BIS","DT","BB_A","BB_D","BB_F","BB_R","CM_A","CM_B","CM_M","DT_M","DT_N","DT_P","DT_S","FM_B_A","FM_I_C","FM_I_F_E","FM_B_L","FM_I_F_Pr","FM_B_Pu","HEX_A_FL","HEX_A_FO","HEX_A_G" ,"HEX_A_P","HEX_C_D","HEX_C_O","HEX_C_PE","HEX_C_PR","HEX_E_A","HEX_E_D","HEX_E_F","HEX_E_S","HEX_H_F","HEX_H_G","HEX_H_M","HEX_H_S","HEX_O_A","HEX_O_C","HEX_O_I","HEX_O_U","JPP_FT","JPP_IE","JPP_JP","JPP_SN")
TG_similarity(
dataset = data,
connection_threshold = .3,
columns = similarity_columns,
name = "name",
use_initials = T, # Use full names for clarity
save_plot = T,
output_width = 12,
output_path = 'Data/similarity_graph.png',
zoom_out_factor = 1.5
)
# --- Similarity Table
similarity_table_custom_threshold <- TG_similarity_table(
dataset = data,
columns = similarity_columns,
name = "name",
format = "html", # Tell the function to return an HTML table
threshold = 0.3 # Set the threshold for bolding and color
)
similarity_table_custom_threshold
# Get the raw HTML string from your table object
raw_html <- similarity_table_custom_threshold
decoded_html <- htmltools::HTML(raw_html) # Decode HTML entities back to proper tags
htmltools::save_html(decoded_html, "Data/similarity_table.html") # Save proper HTML file
webshot("Data/similarity_table.html", file = "Data/similarity_table.png", zoom = 2) # Convert to image
# Render the table in the RStudio Viewer
htmltools::html_print(similarity_table_custom_threshold)
# Plot version
similarity_heatmap <- TraitGraph:::TG_similarity_plot(
dataset = data,
columns = similarity_columns,
name = "name",
show_legend = F
)
ggplot2::ggsave(
filename = "data/similarity_heatmap_example.jpg",
plot = similarity_heatmap,
width = 12,
height = 5,
dpi = 300
)
# Group summary chart ####
# Make dataframe with relevant data
group_score<- data.frame(group_score = colMeans(data[,3:length(data)],na.rm = T))
selected_traits <- c("HEX_H","HEX_E","HEX_X","HEX_A","HEX_C","HEX_O",
#"JPP_FT","JPP_IE","JPP_JP","JPP_SN",
"DT",
"BAS","BIS",
"CM_A","CM_B","CM_M",
"FM_B","FM_I")
trait_names <- c(
"Honesty","Emotionality","Extraversion","Agreeableness","Consciecniousness","Openness",
#"Feel/Think","Itro/Extro","Judge/Perceive","Sense/Intuition",
"Dark Traits",
"BAS","BIS",
"Autonomy","Belonging","Mastery",
"Binding","Individualizing")
group_score <- data.frame(group_score =group_score[selected_traits, ])
group_score$name<-trait_names
group_score$favourite_color <- "gray"
group_score$category <- c(rep("Personality", 7), rep("Motivation", 5), rep("Morals", 2))
# Color determined by strength of score
#group_score$favourite_color <- dplyr::case_when(
#  group_score$group_score < 33 ~ "#E57373",  # Muted Red for low scores
#  group_score$group_score >= 33 & group_score$group_score < 66 ~ "#FFF176",  # Muted Yellow for mid scores
#  group_score$group_score >= 66 ~ "#81C784"   # Muted Green for high scores
#)
# Assign a base color based on the category
group_score$base_color <- dplyr::case_when(
group_score$category == "Personality" ~ "darkblue",  # Muted Blue
group_score$category == "Motivation"  ~ "goldenrod4",  # Muted Orange
group_score$category == "Morals"      ~ "cyan4",  # Muted Teal
TRUE ~ "gray" # Fallback color
)
# Helper function to lighten a color. A factor of 0 is no change, 1 is pure white.
lighten <- function(color, factor) {
rgb_col <- grDevices::col2rgb(color)
light_rgb <- rgb_col + (255 - rgb_col) * factor
grDevices::rgb(t(light_rgb), maxColorValue = 255)
}
# Normalize scores to a 0-0.5 range to use as the lightening factor
# (This prevents high scores from becoming completely white)
group_score <- group_score %>%
dplyr::mutate(lighten_factor = 1 - (group_score / 100))
# Apply the lightening to the base color to create the final color
group_score$favourite_color <- mapply(lighten, group_score$base_color, group_score$lighten_factor)
# --- Call the function with the corrected arguments ---
TraitGraph::TG_trait(
dataset = group_score,
column_name = "group_score",
title = "Group Psychological Profile",
name = "name",
add_group_avg = FALSE,
save_plot = TRUE,
show_plot = TRUE,
output_path = "data/Group_Radar_Chart.jpg"
)
# Stop the timer and report the elapsed time
end_time <- proc.time()
elapsed_time <- end_time - start_time
cat("\nProcessing complete! The graphs have been saved to the \"Data\" folder \n")
cat("Total processing time:", round(elapsed_time['elapsed'], 2), "seconds\n")
